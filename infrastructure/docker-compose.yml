version: '3.8'

services:
  # PostgreSQL for Core Service
  postgres-core:
    image: postgres:15-alpine
    container_name: community-connect-postgres-core
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_CORE_USER}
      POSTGRES_PASSWORD: ${POSTGRES_CORE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_CORE_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
      - ./init-scripts/core-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CORE_USER} -d ${POSTGRES_CORE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL for Transaction Service
  postgres-transaction:
    image: postgres:15-alpine
    container_name: community-connect-postgres-transaction
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_TRANSACTION_USER}
      POSTGRES_PASSWORD: ${POSTGRES_TRANSACTION_PASSWORD}
      POSTGRES_DB: ${POSTGRES_TRANSACTION_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_transaction_data:/var/lib/postgresql/data
      - ./init-scripts/transaction-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TRANSACTION_USER} -d ${POSTGRES_TRANSACTION_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB for Communication Service
  mongodb:
    image: mongo:7-jammy
    container_name: community-connect-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/01-init.js:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: community-connect-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: community-connect-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: "/"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # Elasticsearch for Search (Optional - can be enabled via override)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
  #   container_name: community-connect-elasticsearch
  #   restart: unless-stopped
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   networks:
  #     - community-connect-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 60s

# Named volumes for data persistence
volumes:
  postgres_core_data:
    driver: local
  postgres_transaction_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  # elasticsearch_data:
  #   driver: local

# Custom network for service communication
networks:
  community-connect-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16