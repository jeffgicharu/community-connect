# Community Connect - Infrastructure Services
# Docker Compose file following Docker's official best practices
# Version: Compose Specification (latest)

services:
  # PostgreSQL for Core Service
  postgres-core:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CORE_CONTAINER:-community-connect-postgres-core}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_CORE_DB:-core_service}
      POSTGRES_USER: ${POSTGRES_CORE_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_CORE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_CORE_PORT:-5432}:5432"
    volumes:
      - postgres_core_data:/var/lib/postgresql/data
      - ./init-scripts/core-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_CORE_USER:-postgres} -d ${POSTGRES_CORE_DB:-core_service}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL for Transaction Service
  postgres-transaction:
    image: postgres:16-alpine
    container_name: ${POSTGRES_TRANSACTION_CONTAINER:-community-connect-postgres-transaction}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_TRANSACTION_DB:-transaction_service}
      POSTGRES_USER: ${POSTGRES_TRANSACTION_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_TRANSACTION_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_TRANSACTION_PORT:-5433}:5432"
    volumes:
      - postgres_transaction_data:/var/lib/postgresql/data
      - ./init-scripts/transaction-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TRANSACTION_USER:-postgres} -d ${POSTGRES_TRANSACTION_DB:-transaction_service}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # MongoDB for Communication Service
  mongodb:
    image: mongo:7.0
    container_name: ${MONGODB_CONTAINER:-community-connect-mongodb}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-communication_service}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./init-scripts/mongo-init.js:/docker-entrypoint-initdb.d/01-init.js:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER:-community-connect-redis}
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # RabbitMQ for Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ${RABBITMQ_CONTAINER:-community-connect-rabbitmq}
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-admin123}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-community-connect}
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:5672"     # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - community-connect-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ================================
  # APPLICATION SERVICES
  # ================================

  # Core Service - User Management & Authentication
  core-service:
    build:
      context: ../../backend/core-service
      dockerfile: Dockerfile
    container_name: ${CORE_SERVICE_CONTAINER:-community-connect-core-service}
    restart: unless-stopped
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8081
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres-core:5432/${POSTGRES_CORE_DB:-core_service}
      DATABASE_USERNAME: ${POSTGRES_CORE_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_CORE_PASSWORD:-postgres}
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-for-production}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # Mail Configuration
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
      
      # Cloudinary Configuration
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME:-}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY:-}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET:-}
    ports:
      - "${CORE_SERVICE_PORT:-8081}:8081"
    networks:
      - community-connect-network
    depends_on:
      postgres-core:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Transaction Service - Credits & Service Requests
  transaction-service:
    build:
      context: ../../backend/transaction-service
      dockerfile: Dockerfile
    container_name: ${TRANSACTION_SERVICE_CONTAINER:-community-connect-transaction-service}
    restart: unless-stopped
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8082
      
      # Database Configuration
      DATABASE_URL: jdbc:postgresql://postgres-transaction:5432/${POSTGRES_TRANSACTION_DB:-transaction_service}
      DATABASE_USERNAME: ${POSTGRES_TRANSACTION_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_TRANSACTION_PASSWORD:-postgres}
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # RabbitMQ Configuration
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-admin}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-admin123}
      SPRING_RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VHOST:-community-connect}
      
      # Service URLs
      CORE_SERVICE_URL: http://core-service:8081
      COMMUNICATION_SERVICE_URL: http://communication-service:8083
    ports:
      - "${TRANSACTION_SERVICE_PORT:-8082}:8082"
    networks:
      - community-connect-network
    depends_on:
      postgres-transaction:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      core-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Communication Service - Messaging & Notifications
  communication-service:
    build:
      context: ../../backend/communication-service
      dockerfile: Dockerfile
    container_name: ${COMMUNICATION_SERVICE_CONTAINER:-community-connect-communication-service}
    restart: unless-stopped
    environment:
      # Spring Configuration
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8083
      
      # MongoDB Configuration
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: ${MONGODB_DB:-communication_service}
      SPRING_DATA_MONGODB_USERNAME: ${MONGODB_ROOT_USER:-admin}
      SPRING_DATA_MONGODB_PASSWORD: ${MONGODB_ROOT_PASSWORD:-admin123}
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # RabbitMQ Configuration
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-admin}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-admin123}
      SPRING_RABBITMQ_VIRTUAL_HOST: ${RABBITMQ_VHOST:-community-connect}
      
      # Service URLs
      CORE_SERVICE_URL: http://core-service:8081
      
      # Mail Configuration
      MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME:-}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-}
    ports:
      - "${COMMUNICATION_SERVICE_PORT:-8083}:8083"
    networks:
      - community-connect-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend - Next.js Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    container_name: ${FRONTEND_CONTAINER:-community-connect-frontend}
    restart: unless-stopped
    environment:
      # Next.js Configuration
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: "0.0.0.0"
      NEXT_TELEMETRY_DISABLED: 1
      
      # API Configuration
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost/api}
      NEXT_PUBLIC_CORE_SERVICE_URL: ${NEXT_PUBLIC_CORE_SERVICE_URL:-http://localhost/api/core}
      NEXT_PUBLIC_TRANSACTION_SERVICE_URL: ${NEXT_PUBLIC_TRANSACTION_SERVICE_URL:-http://localhost/api/transaction}
      NEXT_PUBLIC_COMMUNICATION_SERVICE_URL: ${NEXT_PUBLIC_COMMUNICATION_SERVICE_URL:-http://localhost/api/communication}
      
      # WebSocket Configuration
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost/ws}
      
      # GraphQL Configuration
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL:-http://localhost/api/graphql}
      
      # Public Configuration
      NEXT_PUBLIC_APP_NAME: "Community Connect"
      NEXT_PUBLIC_APP_DESCRIPTION: "Time banking platform connecting communities"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - community-connect-network
    depends_on:
      core-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
      communication-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx - API Gateway & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ${NGINX_CONTAINER:-community-connect-nginx}
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - community-connect-network
    depends_on:
      core-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
      communication-service:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named volumes for data persistence
volumes:
  postgres_core_data:
    driver: local
    name: community-connect-postgres-core-data
  postgres_transaction_data:
    driver: local
    name: community-connect-postgres-transaction-data
  mongo_data:
    driver: local
    name: community-connect-mongo-data
  mongo_config:
    driver: local
    name: community-connect-mongo-config
  redis_data:
    driver: local
    name: community-connect-redis-data
  rabbitmq_data:
    driver: local
    name: community-connect-rabbitmq-data
  nginx_logs:
    driver: local
    name: community-connect-nginx-logs

# Custom network for service isolation
networks:
  community-connect-network:
    driver: bridge
    name: community-connect-network